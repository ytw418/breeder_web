// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  relationMode = "prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  relationMode = "prisma"
}

enum role {
  USER
  ADMIN
  SUPER_USER
}

enum UserStatus {
  ACTIVE        // 사용중
  BANNED        // 영구정지
  DELETED       // 삭제
  SUSPENDED_7D  // 7일정지
  SUSPENDED_30D // 한달정지
}


model User {
  id              Int         @id @default(autoincrement())
  role            role        @default(USER)
  status          UserStatus @default(ACTIVE)
  snsId           String      @unique
  provider        String      
  phone           String?     @unique
  email           String?     @unique
  name            String      @unique
  avatar          String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  products        Product[]
  posts           Post[]
  Likes           Like[]
  Comments        Comment[]
  writtenReviews  Review[]    @relation(name: "writtenReviews")
  receivedReviews Review[]    @relation(name: "receivedReviews")
  fav             Fav[]
  sales           Sale[]
  purchases       Purchase[]
  record          Record[]
  messages        Message[]
  followers       Follow[]    @relation(name: "follower")
  following       Follow[]    @relation(name: "following")
  chatRoomMember    ChatRoomMember[]


}
model ChatRoom {
  id              Int               @id @default(autoincrement())
  type            String            @default("profile") // profile or product
  productId       Int?
  product         Product?          @relation(fields: [productId], references: [id])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  messages        Message[]
  chatRoomMembers ChatRoomMember[]
  buyerConfirmed  Boolean           @default(false)
  sellerConfirmed Boolean           @default(false)
  isCompleted     Boolean           @default(false)

  @@index([productId])
}


model ChatRoomMember {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt @default(now())
  lastReadAt DateTime?
  isBuyer    Boolean  @default(false)

  @@unique([userId, chatRoomId])
  @@index([chatRoomId])
}


model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  message   String   
  chatRoom   ChatRoom? @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId Int?


  @@index([chatRoomId])
  @@index([userId])
}




model Follow {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  follower    User     @relation(name: "follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  Int
  following   User     @relation(name: "following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId Int

  @@index([followerId])
  @@index([followingId])

}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  price       Int?
  description String
  photos      String[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  favs        Fav[]
  sales       Sale[]
  purchases   Purchase[]
  records     Record[]
  chatRooms   ChatRoom[]

  // 2025.04.26일 추가 필드(아직 미사용)
  category String? // 예를 들면 곤충/강아지/고양이/파충류/물고기/기타/전체 등등 
  tags     String[]  // 태그는 문자열 배열로 저장
  isSold    Boolean @default(false)
  isDeleted Boolean @default(false)
  isHidden  Boolean @default(false)
  location       String?    // 거래 지역
  viewCount      Int        @default(0) // 조회수
  wishCount      Int        @default(0) // 찜/관심 수
  status         String     @default("판매중") // 판매 상태: 판매중, 예약중, 판매완료 등
  condition      String?    // 상품 컨디션: 새상품, 중고 등
  contactCount   Int        @default(0) // 문의/채팅 수
  expireAt       DateTime?  // 게시글 만료일
  deliveryType   String?    // 직거래/택배 등
  priceOfferable Boolean    @default(true) // 가격 제안 가능 여부
  mainImage      String?    // 대표 이미지
  isFeatured     Boolean    @default(false) // 추천 상품 여부
  reportCount    Int        @default(0) // 신고 횟수

  @@index([userId])
}

model Post {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  title    String
  description String
  type String?
  comments Comment[]
  latitude  Float?
  longitude Float?
  Likes      Like[]
  image       String

  @@index([userId])

}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  comment String

  @@index([userId])
  @@index([postId])

}


model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int

  @@index([userId])
  @@index([postId])

}

model Review {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  review       String   
  createdBy    User     @relation(name: "writtenReviews", fields: [createdById], references: [id], onDelete: Cascade)
  createdById  Int
  createdFor   User     @relation(name: "receivedReviews", fields: [createdForId], references: [id], onDelete: Cascade)
  createdForId Int
  score        Int      @default(1)

  @@index([createdById])
  @@index([createdForId])

}

model Sale {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    String   @default("pending") // pending, completed
  @@index([userId])
  @@index([productId])
}

model Purchase {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    String   @default("pending") // pending, completed
  @@index([userId])
  @@index([productId])
}

model Fav {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([userId])
  @@index([productId])
}

model Record {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  kind      String
  updatedAt DateTime @updatedAt
  @@index([userId])
  @@index([productId])
}

enum Kind {
  Purchase
  Sale
  Fav
}




// chatRoom
// 채팅방