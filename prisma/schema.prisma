// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  relationMode = "prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  relationMode = "prisma"
}

enum role {
  USER
  ADMIN
  SUPER_USER
}

model User {
  id              Int         @id @default(autoincrement())
  role            role        @default(USER)
  snsId           String      @unique
  provider        String      
  phone           String?     @unique
  email           String?     @unique
  name            String      @unique
  avatar          String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  products        Product[]
  posts           Post[]
  Likes           Like[]
  Comments        Comment[]
  writtenReviews  Review[]    @relation(name: "writtenReviews")
  receivedReviews Review[]    @relation(name: "receivedReviews")
  fav             Fav[]
  sales           Sale[]
  purchases       Purchase[]
  record          Record[]
  messages        Message[]
  followers       Follow[]    @relation(name: "follower")
  following       Follow[]    @relation(name: "following")
  chatRoomMember    ChatRoomMember[]

}
model ChatRoom {
  id            Int @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  chatRoomMembers  ChatRoomMember[]
  messages        Message[]
}


model ChatRoomMember {
  id        Int @id @default(autoincrement())
  user      User @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId    Int
  chatRoom  ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId Int

  @@index([userId])
  @@index([chatRoomId])
}


model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  message   String   
  chatRoom   ChatRoom? @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId Int?


  @@index([chatRoomId])
  @@index([userId])
}




model Follow {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  follower    User     @relation(name: "follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  Int
  following   User     @relation(name: "following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId Int

  @@index([followerId])
  @@index([followingId])

}

model Product {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  image       String
  name        String
  price       Int
  description String     
  favs        Fav[]
  sales       Sale[]
  purchases   Purchase[]
  records     Record[]

  @@index([userId])
}

model Post {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  title    String
  description String
  type String?
  comments Comment[]
  latitude  Float?
  longitude Float?
  Likes      Like[]
  image       String

  @@index([userId])

}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  comment String

  @@index([userId])
  @@index([postId])

}


model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int

  @@index([userId])
  @@index([postId])

}

model Review {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  review       String   
  createdBy    User     @relation(name: "writtenReviews", fields: [createdById], references: [id], onDelete: Cascade)
  createdById  Int
  createdFor   User     @relation(name: "receivedReviews", fields: [createdForId], references: [id], onDelete: Cascade)
  createdForId Int
  score        Int      @default(1)

  @@index([createdById])
  @@index([createdForId])

}

model Sale {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
   @@index([userId])
  @@index([productId])
  
}

model Purchase {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([userId])
  @@index([productId])
}

model Fav {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([userId])
  @@index([productId])
}

model Record {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  kind      String
  updatedAt DateTime @updatedAt
  @@index([userId])
  @@index([productId])
}

enum Kind {
  Purchase
  Sale
  Fav
}




// chatRoom
// 채팅방