---
description: 
globs: 
alwaysApply: true
---
# API Rule

- **API 파일 위치**  
  - 모든 API 라우트는 [pages/api/](mdc:pages/api) 디렉토리에 위치해야 합니다.
  - 각 도메인별로 하위 폴더를 만들어 관리합니다. (예: products, users, chat 등)

- **핸들러 구조 및 래퍼 사용**  
  - 모든 API는 `withHandler`와 `withApiSession`(또는 인증이 필요 없는 경우 `withHandler`만)으로 래핑해야 합니다.
  - 핸들러 함수는 `async` 함수로 작성합니다.
  - 지원하는 HTTP 메서드는 `methods` 옵션에 명시합니다.
  - `withHandler` , `withApiSession` 직접 수정하지 않습니다.

- **타입 명시**  
  - `NextApiRequest`, `NextApiResponse<ResponseType>` 등 타입을 명확히 지정합니다.
  - 응답 타입은 반드시 `{ success: boolean, ... }` 형태를 기본으로 사용합니다.

- **인증/권한**  
  - 인증이 필요한 API는 `isPrivate: true` 옵션을 사용하고, 세션에서 user 정보를 확인합니다.
  - 인증이 필요 없는 API는 `isPrivate: false`로 설정합니다.

- **에러 핸들링**  
  - 모든 비동기 로직은 try-catch로 감싸고, 에러 발생 시 `{ success: false, error: ... }` 형태로 응답합니다.
  - 401, 403, 404, 405, 500 등 상황에 맞는 HTTP status 코드를 사용합니다.

- **DB 접근**  
  - DB 작업은 반드시 [@libs/server/client.ts](mdc:libs/server/client.ts)에서 export한 client(Prisma)를 사용합니다.
  - 쿼리 파라미터, body 값 등은 타입 체크 및 유효성 검사를 거쳐야 합니다.

- **응답 구조**  
  - 모든 응답은 `{ success: boolean, ... }` 형태로 통일합니다.
  - 에러 메시지는 사용자에게 명확하게 전달합니다.

- **네이밍 및 파일 구조**  
  - 파일명, 폴더명은 소문자, 복수형을 원칙으로 합니다. (예: products, users)
  - 동적 라우트는 `[id]` 등 Next.js 규칙을 따릅니다.

- **공통 유틸리티 사용**  
  - 공통 미들웨어(`withHandler`, `withApiSession`)을 반드시 사용합니다.
  - 직접적인 fetch/axios 호출은 지양하고, 필요한 경우 별도 유틸 파일로 분리합니다.
  - api 파일별로 export const ***ResponseType 을 만들어서 클라이언트에서 import 해서 사용할 수 있게 합니다.
  - 타입은 (`ResponseType`)과 다른 api 파일을 참고해서 만듭니다.

- **로깅 및 디버깅**  
  - 불필요한 console.log, 디버깅 코드는 PR 머지 전 반드시 제거합니다.

- **주석 및 문서화**  
  - 복잡한 로직, 예외 처리 등은 상세 주석을 남깁니다.
  - API 변경 시 관련 문서(예: API 명세서)도 함께 업데이트합니다.
