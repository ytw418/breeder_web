---
description: 
globs: 
alwaysApply: true
---
---
description: 프론트엔드 개발 가이드라인
globs: 
alwaysApply: true
---


# 📱 프론트엔드 개발 가이드라인

## 1. 🛠 기술 스택
- **주요 프레임워크**: ReactJS, NextJS 14
- **언어**: TypeScript
- **스타일링**: TailwindCSS
- **상태 관리**: 
  - react-hook-form (폼 관리)
  - SWR (데이터 페칭)
- **백엔드**: Supabase
- **ORM**: Prisma

## 2. 🎨 디자인 시스템
### UI/UX 원칙
- 모바일 우선 설계
- 반응형 디자인 필수
- 다크모드/라이트모드 지원

### 컬러 시스템
- **기본 컬러**: 
  - 검정색
  - 하얀색
- **프라이머리 컬러**: css 코드 참고

### 참고 사이트
- 디자인: tossinvest.com
- 디자인 : https://www.daangn.com/kr/cars/?in=%EC%84%B1%EB%B3%B5%EB%8F%99-1697
- 디자인 : https://okky.kr/

## 3. 📁 파일 구조
### 네이밍 규칙
- **컴포넌트**: 대문자 시작 (예: `MainClient.tsx`)
- **폴더**: 소문자 시작

### 폴더 구조
```
app/xx/
├── page.tsx
└── xxClient.tsx (클라이언트 컴포넌트)
```

## 4. ✍️ 코딩 스타일
### 기본 규칙
- Tailwind 클래스 사용 (CSS 직접 사용 금지)
- 화살표 함수 사용 권장
- 상세한 주석 작성 (3년차 개발자 수준)
- ESLint, Prettier 설정 준수

### 접근성
- `aria-label` 속성 사용
- `tabindex="0"` 설정
- 키보드 네비게이션 지원

### 컴포넌트
- Shadcn/UI 컴포넌트 활용
- 기존 코딩 스타일 유지
- @frontend-fundamentals.com/code/ 참고

## 5. 🔧 프로젝트 설정
- **패키지 매니저**: npm
- **API 경로**: pages/api/
- **도메인**: breeder-web.vercel.app

### API 구현 시 주의사항
- 기존 SWR 관련 코드 활용
- 직접 만든 API 핸들러 활용
- 기존 API 변경 시 신중하게 진행

## 6. 📝 코드 품질
### 핵심 원칙
- DRY (Don't Repeat Yourself) 원칙 준수
- 기존 코드 최대한 활용
- 완성된 코드 작성 (미완성 코드, TODO 금지)
- 가독성 중시

### 구현 가이드
- early returns 사용
- 명확한 변수명과 함수명 사용
- 이벤트 함수는 "handle" 접두사 사용
- 타입 정의 필수

## 7. 🚫 금지사항
- CSS 직접 사용
- 미완성 코드 작성
- 중복된 라이브러리 설치
- 공통 컴포넌트/함수 수정
- `withHandler.ts`와 `withSession.ts` 수정
- `tsconfig.json` 경로 설정 수정


## 8. 🔍 코드 작성 전 체크리스트
1. 기존 코드 검색
2. 비슷한 기능의 컴포넌트 확인
3. 공통 함수/타입 활용 가능성 검토
4. import 경로 정확히 확인

## 9. 📦 Import 규칙
### 경로 별칭
```json
{
  "@libs/*": ["libs/*"],
  "@images/*": ["public/images/*"],
  "@icons/*": ["public/icons/*"],
  "@hero/*": ["public/hero/*"],
  "@components/*": ["components/*"],
  "@/*": ["./src/*"]
}
```

---

## 10. 💡 예시 코드

### MainClient 컴포넌트
```typescript
const MainClient = () => {

  const {user} = useUser()

  const handleClick = () => {

    
    // 이벤트 처리
  };


if(!user){
  return null
}

  return (
    <div className="flex flex-col items-center justify-center min-h-screen">
      <Button
        onClick={handleClick}
        tabIndex={0}
        aria-label="메인 버튼"
      >
        클릭하세요
      </Button>

      <div>{user.id ?? ""}</div>
    </div>
  );
};

export default MainClient;
```
